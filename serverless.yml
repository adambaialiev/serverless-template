org: shopwallet
app: shop-wallet-serverless
service: shop-wallet-serverless

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  profile: ${opt:stage, "dev"}
  versionFunctions: false
  environment:
    stage: ${opt:stage}
    dynamo_table:
      Ref: MainTable
    learning_platform_table:
      Ref: LearningPlatformTable
    booksgpt_table:
      Ref: BooksGPTTable
    learning_platform_bucket:
      Ref: LearningPlatformBucket
    booksgpt_bucket:
      Ref: BooksGPTBucket
    MAIN_QUEUE_URL:
      Ref: MainQueue
    ALCHEMY_API_KEY_MATIC: ${env:ALCHEMY_API_KEY_MATIC}
    ALCHEMY_API_KEY_ETH: ${env:ALCHEMY_API_KEY_ETH}
    CHAINSTACK_NODE: ${env:CHAINSTACK_NODE}
    TATUM_WEBHOOK_URL: ${env:TATUM_WEBHOOK_URL}
    TATUM_API_KEY: ${env:TATUM_API_KEY}
    ETHERSCAN_API_KEY: ${env:ETHERSCAN_API_KEY}
    POLYGONSCAN_API_KEY: ${env:POLYGONSCAN_API_KEY}
    COIN_MARKET_CAP_API_KEY: ${env:COIN_MARKET_CAP_API_KEY}
    COIN_MARKET_CAP_API_URL: ${env:COIN_MARKET_CAP_API_URL}
    TELEGRAM_BOT_TOKEN: ${env:TELEGRAM_BOT_TOKEN}
    SLACK_WALLET_WATCHER_URL: ${env:SLACK_WALLET_WATCHER_URL}
    SLACK_BOT_CHANNEL_URL: ${env:SLACK_BOT_CHANNEL_URL}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:RemoveItem
        - dynamodb:DeleteItem
        - sns:*
        - sqs:*
        - s3:*
      Resource: '*'

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 5
  customDomain:
    domainName: ${opt:stage}-api.shopwalletapp.com
    basePath: 'api'
    stage: ${opt:stage}
    createRoute53Record: true

functions:
  booksgpt-get-upload-url:
    handler: build/src/endpoints/booksgpt/getUploadUrl.main
    events:
      - http:
          path: /v1/booksgpt/upload-url
          method: POST
          cors: true
  assistant-feed:
    handler: build/src/endpoints/booksgpt/assistantFeed.main
    events:
      - http:
          path: /v1/booksgpt/assistant/{assistantId}/feed
          method: GET
          cors: true
          request:
            parameters:
              paths:
                assistantId: true
  add-response-to-feed:
    handler: build/src/endpoints/booksgpt/addResponseToAssistantFeed.main
    events:
      - http:
          path: /v1/booksgpt/assistant/{assistantId}/feed
          method: POST
          cors: true
  retrieve-run:
    handler: build/src/endpoints/booksgpt/retrieveRun.main
    events:
      - http:
          path: /v1/booksgpt/threads/{threadId}/runs/{runId}
          method: GET
          cors: true
          request:
            parameters:
              paths:
                threadId: true
                runId: true
  list-messages:
    handler: build/src/endpoints/booksgpt/listMessages.main
    events:
      - http:
          path: /v1/booksgpt/threads/{threadId}/messages
          method: GET
          cors: true
          request:
            parameters:
              paths:
                threadId: true
  create-thread-and-run:
    handler: build/src/endpoints/booksgpt/createThreadAndRun.main
    events:
      - http:
          path: /v1/booksgpt/threads/runs
          method: POST
          cors: true
  create-run:
    handler: build/src/endpoints/booksgpt/createRun.main
    events:
      - http:
          path: /v1/booksgpt/threads/{threadId}/runs
          method: POST
          cors: true
          request:
            parameters:
              paths:
                threadId: true
  create-message:
    handler: build/src/endpoints/booksgpt/createMessage.main
    events:
      - http:
          path: /v1/booksgpt/threads/{threadId}/messages
          method: POST
          cors: true
          request:
            parameters:
              paths:
                threadId: true
  update-lessons:
    handler: build/src/endpoints/learningPlatform/course/updateLessons.main
    events:
      - http:
          path: /course/lessons
          method: POST
          cors: true
  create-course:
    handler: build/src/endpoints/learningPlatform/course/createCourse.main
    events:
      - http:
          path: /course
          method: POST
          cors: true
  update-course:
    handler: build/src/endpoints/learningPlatform/course/updateCourse.main
    events:
      - http:
          path: /course
          method: PUT
          cors: true
  get-courses:
    handler: build/src/endpoints/learningPlatform/course/getCourses.main
    events:
      - http:
          path: /course
          method: GET
          cors: true
  create-creator:
    handler: build/src/endpoints/learningPlatform/creator/createCreator.main
    events:
      - http:
          path: /creator
          method: POST
          cors: true
  get-creators:
    handler: build/src/endpoints/learningPlatform/creator/getCreators.main
    events:
      - http:
          path: /creator
          method: GET
          cors: true
  get-upload-url:
    handler: build/src/endpoints/learningPlatform/creator/getUploadUrl.main
    events:
      - http:
          path: /upload-url
          method: POST
          cors: true
resources:
  Resources:
    MainQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: MainQueue-${self:provider.profile}
    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MainTable-${self:provider.profile}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    BooksGPTTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BooksGPTTable-${self:provider.profile}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    LearningPlatformTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LearningPlatformTable-${self:provider.profile}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    LearningPlatformBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: learning-platform-bucket-${self:provider.profile}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BooksGPTBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: books-gpt-bucket-${self:provider.profile}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
