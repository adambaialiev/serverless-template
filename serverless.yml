org: shopwallet
app: shop-wallet-serverless
service: shop-wallet-serverless

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  profile: ${opt:stage, "dev"}
  versionFunctions: false
  environment:
    stage: ${opt:stage}
    dynamo_table:
      Ref: MainTable
    ALCHEMY_API_KEY_MATIC: ${env:ALCHEMY_API_KEY_MATIC}
    ALCHEMY_API_KEY_ETH: ${env:ALCHEMY_API_KEY_ETH}
    CHAINSTACK_NODE: ${env:CHAINSTACK_NODE}
    TATUM_WEBHOOK_URL: ${env:TATUM_WEBHOOK_URL}
    TATUM_API_KEY: ${env:TATUM_API_KEY}
    ETHERSCAN_API_KEY: ${env:ETHERSCAN_API_KEY}
    POLYGONSCAN_API_KEY: ${env:POLYGONSCAN_API_KEY}
    COIN_MARKET_CAP_API_KEY: ${env:COIN_MARKET_CAP_API_KEY}
    COIN_MARKET_CAP_API_URL: ${env:COIN_MARKET_CAP_API_URL}
    STAGING_SLACK_SUPPORT_URL: ${env:STAGING_SLACK_SUPPORT_URL}
    STAGING_SLACK_FEEDBACK_URL: ${env:STAGING_SLACK_FEEDBACK_URL}
    STAGING_SLACK_GET_BALANCES_URL: ${env:STAGING_SLACK_GET_BALANCES_URL}
    STAGING_SLACK_GET_TRANSACTION_URL: ${env:STAGING_SLACK_GET_TRANSACTION_URL}
    STAGING_SLACK_MAKE_TRANSACTION_URL: ${env:STAGING_SLACK_MAKE_TRANSACTION_URL}
    STAGING_SLACK_UPDATE_PRICES_URL: ${env:STAGING_SLACK_UPDATE_PRICES_URL}
    STAGING_SLACK_CREATE_WALLET_URL: ${env:STAGING_SLACK_CREATE_WALLET_URL}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:RemoveItem
        - dynamodb:DeleteItem
        - sns:*
      Resource: '*'

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 5
  customDomain:
    domainName: ${opt:stage}-api.shopwalletapp.com
    basePath: 'api'
    stage: ${opt:stage}
    createRoute53Record: true

functions:
  getCryptoTransactions:
    timeout: 30
    handler: build/src/endpoints/crypto/getTransactions.getTransactions
    events:
      - http:
          path: /v1/crypto/transactions/history
          method: post
          cors: true
  getBalances:
    timeout: 30
    handler: build/src/endpoints/crypto/getBalances.getBalances
    events:
      - http:
          path: /v1/crypto/get-balances
          method: post
          cors: true
  createWallet:
    timeout: 30
    handler: build/src/endpoints/crypto/createWallet.createWallet
    events:
      - http:
          path: /v1/crypto/create-wallet
          method: post
          cors: true
  clear:
    timeout: 30
    handler: build/src/endpoints/app/validateDeposits.validateDeposits
    events:
      - http:
          path: /v1/app/clear
          method: post
          cors: true
  summary:
    handler: build/src/endpoints/app/summary.summary
    events:
      - http:
          path: /v1/app/summary
          method: post
          cors: true
  clearMW:
    handler: build/src/endpoints/debug/clearMasterWallet.clearMasterWallet
    events:
      - http:
          path: /v1/clear-master-wallet
          method: post
          cors: true
  debug:
    handler: build/src/endpoints/debug/debug.debug
    events:
      - http:
          path: /v1/debug
          method: post
          cors: true
  crypto-webhook:
    timeout: 30
    handler: build/src/endpoints/crypto/webhook.webhook
    events:
      - http:
          path: /v1/crypto/webhook
          method: post
          cors: true
  crypto-update-prices:
    timeout: 30
    handler: build/src/endpoints/crypto/updatePrices.updatePrices
    events:
      - http:
          path: /v1/crypto/update-prices
          method: get
          cors: true
  crypto-webhook-t:
    timeout: 30
    handler: build/src/endpoints/crypto/webhookTatum.webhook
    events:
      - http:
          path: /v1/crypto/webhook-tatum
          method: post
          cors: true
  init:
    handler: build/src/endpoints/app/init.init
    events:
      - http:
          path: /v1/app/init
          method: post
          cors: true
  getUserWallet:
    handler: build/src/endpoints/user/getUserWallet.getUserWallet
    events:
      - http:
          path: /v1/user/wallet
          method: post
          cors: true

  getUsersForAdmin:
    handler: build/src/endpoints/user/getUsersForAdmin.getUsersForAdmin
    events:
      - http:
          path: /v1/users/get-users-for-admin
          method: post
          cors: true
  withdraw:
    handler: build/src/endpoints/wallet/withdraw.withdraw
    events:
      - http:
          path: /v1/wallet/withdraw
          method: post
          cors: true
  addWithdrawalAddress:
    handler: build/src/endpoints/wallet/addWithdrawalAddress.addWithdrawalAddress
    events:
      - http:
          path: /v1/wallet/withdraw/add-address
          method: post
          cors: true
  removeWithdrawalAddress:
    handler: build/src/endpoints/wallet/removeWithdrawalAddress.removeWithdrawalAddress
    events:
      - http:
          path: /v1/wallet/withdraw/remove-address/{id}
          method: delete
          cors: true
  savePushTokenToUser:
    handler: build/src/endpoints/savePushTokenToUser/savePushTokenToUser.savePushTokenToUser
    events:
      - http:
          path: /v1/users/pushToken
          method: post
          cors: true
  decrementBadgeCount:
    handler: build/src/endpoints/notifications/decrementBadgeCount.decrementBadgeCount
    events:
      - http:
          path: /v1/notifications/badge/decrement
          method: put
          cors: true

  makeCryptoTransfer:
    handler: build/src/endpoints/crypto/makeTransaction.makeTransaction
    events:
      - http:
          path: /v1/crypto/transaction
          method: post
          cors: true
  getTransactions:
    handler: build/src/endpoints/transactions/getTransactions.getTransactions
    events:
      - http:
          path: /v1/transactions/{phoneNumber}
          method: get
          cors: true
  getUsersTransactions:
    handler: build/src/endpoints/crypto/getTransactionsBetweenUsers.getTransactionsBetweenUsers
    events:
      - http:
          path: /v1/crypto/transactions
          method: get
          cors: true
  getTransactionDetails:
    handler: build/src/endpoints/crypto/getTransactionDetails.getTransactionDetails
    events:
      - http:
          path: /v1/crypto/transaction-details
          method: post
          cors: true

  getTransactionsRoom:
    handler: build/src/endpoints/transactions/getTransactionsRoom.getTransactionsRoom
    events:
      - http:
          path: /v1/transactions/room
          method: post
          cors: true
  createTransactionRequest:
    timeout: 10
    handler: build/src/endpoints/transactions/createRequest.createRequest
    events:
      - http:
          path: /v1/transactions/request
          method: post
          cors: true
  acceptRequest:
    handler: build/src/endpoints/transactions/acceptRequest.acceptRequest
    events:
      - http:
          path: /v1/transactions/request/accept/{id}
          method: put
          cors: true
  declineRequest:
    handler: build/src/endpoints/transactions/declineRequest.declineRequest
    events:
      - http:
          path: /v1/transactions/request/decline/{id}
          method: put
          cors: true

  getUser:
    handler: build/src/endpoints/user/getUser.getUser
    events:
      - http:
          path: /v1/users/{phoneNumber}
          method: get
          cors: true
  getAlienPackAvatars:
    handler: build/src/endpoints/avatarPacks/getAlienPacks.getAlienPacks
    events:
      - http:
          path: /v1/avatars/alien-pack
          method: get
          cors: true
  getMonsterPackAvatars:
    handler: build/src/endpoints/avatarPacks/getMonsterPacks.getMonsterPacks
    events:
      - http:
          path: /v1/avatars/monster-pack
          method: get
          cors: true
  getRegisteredUsers:
    handler: build/src/endpoints/user/getRegisteredUsers.getRegisteredUsers
    events:
      - http:
          path: /v1/users/registered
          method: post
  updateIsReadTransaction:
    handler: build/src/endpoints/transactions/updateReadState.updateReadState
    events:
      - http:
          path: /v1/transactions/read/{id}
          method: put
  updateUser:
    handler: build/src/endpoints/user/updateUser.updateUser
    events:
      - http:
          path: /v1/users/update
          method: put
          cors: true

  signIn:
    handler: build/src/endpoints/sign-in/sign-in.signIn
    events:
      - http:
          path: /v1/auth/sign-in
          method: post
          cors: true

  signInVerify:
    handler: build/src/endpoints/sign-in-verify/sign-in-verify.signInVerify
    events:
      - http:
          path: /v1/auth/sign-in/verify
          method: post
          cors: true

  refreshToken:
    handler: build/src/endpoints/refreshToken/refreshToken.refreshTokenHandler
    events:
      - http:
          path: /v1/auth/refreshToken
          method: post
          cors: true

  deleteAccount:
    handler: build/src/endpoints/delete-account/deleteAccount.deleteAccount
    events:
      - http:
          path: /v1/auth/delete
          method: post
          cors: true

  createSupportTicket:
    handler: build/src/endpoints/support/createSupportTicket.createSupportTicket
    events:
      - http:
          path: /v1/support
          method: post
          cors: true
  createFeedback:
    handler: build/src/endpoints/feedback/createFeedback.createFeedback
    events:
      - http:
          path: /v1/feedback
          method: post
          cors: true

  createMonitoringInfo:
      handler: build/src/endpoints/monitoring/createMonitoringInfo.createMonitoringInfo
      events:
        - http:
            path: /v1/monitoring
            method: post
            cors: true

resources:
  Resources:
    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MainTable-${self:provider.profile}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
