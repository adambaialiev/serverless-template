org: shopwallet
app: shop-wallet-serverless
service: shop-wallet-serverless

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  profile: ${opt:stage, "dev"}
  environment:
    user_pool_id:
      Ref: UserPool
    client_id:
      Ref: UserClient
    dynamo_table:
      Ref: MainTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminRespondToAuthChallenge
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:RemoveItem
        - sns:*
      Resource: '*'

plugins:
  - serverless-offline
  - serverless-domain-manager

custom:
  userPoolName: shop-wallet-users-pool-${self:provider.profile}
  customDomain:
    domainName: ${opt:stage}-api.shopwalletapp.com
    basePath: 'v1'
    stage: ${opt:stage}
    createRoute53Record: true

functions:
  makeTransaction:
    handler: build/src/endpoints/makeTransaction/makeTransaction.makeTransaction
    events:
      - http:
          path: /api/shop-wallet/balance/makeTransaction
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  signUp:
    timeout: 10
    handler: build/src/endpoints/sign-up/sign-up.signUp
    events:
      - http:
          path: /api/shop-wallet/auth/sign-up
          method: post
          cors: true

  signIn:
    timeout: 10
    handler: build/src/endpoints/sign-in/sign-in.signIn
    events:
      - http:
          path: /api/shop-wallet/auth/sign-in
          method: post
          cors: true
  signInVerify:
    timeout: 10
    handler: build/src/endpoints/sign-in-verify/sign-in-verify.signInVerify
    events:
      - http:
          path: /api/shop-wallet/auth/sign-in/verify
          method: post
          cors: true
  refreshToken:
    timeout: 10
    handler: build/src/endpoints/refreshToken/refreshToken.refreshTokenHandler
    events:
      - http:
          path: /api/shop-wallet/auth/refreshToken
          method: post
          cors: true
  createAuthChallenge:
    handler: build/src/triggers/create-auth-challenge.createAuthChallenge
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: CreateAuthChallenge
          existing: true
          forceDeploy: true

  verifyAuthChallenge:
    handler: build/src/triggers/verify-auth-challenge.verifyAuthChallenge
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: VerifyAuthChallengeResponse
          existing: true
          forceDeploy: true

  defineAuthChallenge:
    handler: build/src/triggers/define-auth-challenge.defineAuthChallenge
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: DefineAuthChallenge
          existing: true
          forceDeploy: true

  preSignUp:
    handler: build/src/triggers/pre-sign-up.preSignUp
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PreSignUp
          existing: true
          forceDeploy: true

  postSignUp:
    handler: build/src/triggers/post-sign-up.postSignUp
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PostConfirmation
          existing: true
          forceDeploy: true

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - phone_number
        Policies:
          PasswordPolicy:
            RequireLowercase: false
            RequireSymbols: false
            RequireNumbers: false
            MinimumLength: 6
            RequireUppercase: false

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: shop-wallet-app-client-${self:provider.profile}
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
        ExplicitAuthFlows:
          - 'ALLOW_CUSTOM_AUTH'
          - 'ALLOW_REFRESH_TOKEN_AUTH'

    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MainTable-${self:provider.profile}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
