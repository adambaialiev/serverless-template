org: shopwallet
app: shop-wallet-serverless
service: shop-wallet-serverless

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  profile: ${opt:stage, "dev"}
  environment:
    dynamo_table:
      Ref: MainTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:RemoveItem
        - dynamodb:DeleteItem
        - sns:*
      Resource: '*'

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 5
  customDomain:
    domainName: ${opt:stage}-api.shopwalletapp.com
    basePath: 'api'
    stage: ${opt:stage}
    createRoute53Record: true

functions:
  makeMerchantTransaction:
    handler: build/src/endpoints/merchant/preTransaction.preTransaction
    events:
      - http:
          path: /v1/merchant/transaction/{apiKey}
          method: post
          cors: true

  ConfirmPreTransaction:
    handler: build/src/endpoints/merchant/confirmPreTransaction.ConfirmPreTransaction
    events:
      - http:
          path: /v1/users/confirm-transaction
          method: post
          cors: true

  createApiKey:
    handler: build/src/endpoints/merchant/createApiKey.createApiKey
    events:
      - http:
          path: /v1/merchant/apikey
          method: post
          cors: true

  makeTransaction:
    handler: build/src/endpoints/transactions/makeTransaction.makeTransaction
    events:
      - http:
          path: /v1/transaction
          method: post
          cors: true

  getTransactionByAdmin:
    handler: build/src/endpoints/transactions/getTransactionByAdmin.getTransactions
    events:
      - http:
          path: /v1/transactions
          method: get
          cors: true

  getTransactions:
    handler: build/src/endpoints/transactions/getTransactions.getTransactions
    events:
      - http:
          path: /v1/transactions/{phoneNumber}
          method: get
          cors: true

  createWallet:
    handler: build/src/endpoints/wallet/createWallet.createWallet
    events:
      - http:
          path: /v1/wallet
          method: post
          cors: true

  getTransactionsRoom:
    handler: build/src/endpoints/transactions/getTransactionsRoom.getTransactionsRoom
    events:
      - http:
          path: /v1/transactions/room
          method: post
          cors: true

  merchantSignin:
    handler: build/src/endpoints/merchant/sign-in.signIn
    events:
      - http:
          path: /v1/merchant/sign-in
          method: post
          cors: true

  merchantSigninVerify:
    handler: build/src/endpoints/merchant/sign-in-verify.signInVerify
    events:
      - http:
          path: /v1/merchant/sign-in-verify
          method: post
          cors: true

  getUser:
    handler: build/src/endpoints/user/getUser.getUser
    events:
      - http:
          path: /v1/users/{phoneNumber}
          method: get
          cors: true

  getRegisteredUsers:
    handler: build/src/endpoints/user/getRegisteredUsers.getRegisteredUsers
    events:
      - http:
          path: /v1/users/registered
          method: post
          cors: true
  signIn:
    timeout: 10
    handler: build/src/endpoints/sign-in/sign-in.signIn
    events:
      - http:
          path: /v1/auth/sign-in
          method: post
          cors: true

  signInVerify:
    timeout: 10
    handler: build/src/endpoints/sign-in-verify/sign-in-verify.signInVerify
    events:
      - http:
          path: /v1/auth/sign-in/verify
          method: post
          cors: true

  refreshToken:
    timeout: 10
    handler: build/src/endpoints/refreshToken/refreshToken.refreshTokenHandler
    events:
      - http:
          path: /v1/auth/refreshToken
          method: post
          cors: true

resources:
  Resources:
    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MainTable-${self:provider.profile}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
